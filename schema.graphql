type Account @entity {
  "Account address"
  id: ID!
  transfersTo: [Transfer!] @derivedFrom(field: "to")
  transfersFrom: [Transfer!] @derivedFrom(field: "from")
}

type Transfer @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  from: Account!
  to: Account!
  amount: BigInt! @index
  fee: BigInt! # fee is calculated at the best effort and may be zero for some old extrinsics
}

type Block @entity {
  id: ID!
  height: Int! @index
  hash: String! @index
  parentHash: String!
  stateRoot: String!
  timestamp: DateTime! @index
  extrinsicsRoot: String
  spec: Metadata!
  validator: String @index
  events: [Event!]! @derivedFrom(field: "block")
  calls: [Call!]! @derivedFrom(field: "block")
  extrinsics: [Extrinsic!]! @derivedFrom(field: "block")
}

type Extrinsic @entity {
  id: ID!
  block: Block!
  indexInBlock: Int!
  version: Int!
  signature: JSON
  success: Boolean!
  error: JSON
  call: Call!
  fee: BigInt
  tip: BigInt
  hash: String! @index
  pos: Int!
  # all internal calls
  calls: [Call!] @derivedFrom(field: "extrinsic")
}

type Call @entity {
  id: ID!
  parent: Call
  block: Block!
  extrinsic: Extrinsic!
  success: Boolean!
  error: JSON
  origin: JSON
  name: String! @index
  args: JSON
  pos: Int!
}

type Event @entity {
  id: ID!
  block: Block!
  indexInBlock: Int!
  phase: String!
  extrinsic: Extrinsic
  call: Call
  name: String! @index
  args: JSON
  pos: Int!
}

type Metadata @entity {
  id: ID!
  specName: String!
  specVersion: Int
  blockHeight: Int!
  blockHash: String!
  hex: String!
}

type Address @entity {
  id: ID!
  ss58: String!
  type: String
  label: String
}
