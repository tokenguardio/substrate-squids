type EventNorm @entity {
  id: ID!
  blockHash: String!
  timestamp: DateTime! @index
  name: String! @index
  args: JSON
  extrinsicSuccess: Boolean
}

type CallNorm @entity {
  id: ID!
  blockHash: String!
  timestamp: DateTime! @index
  name: String! @index
  args: JSON
  success: Boolean
  origin: JSON
}

type AddressMapping @entity {
  id: ID! @index
  ss58: String
}

type Trace @entity {
  id: ID!
  transaction: Transaction!
  transactionIndex: Int
  type: TraceType
  subtraces: Int
  error: String
  action: Action
  result: Result
}

enum TraceType {
  CREATE
  CALL
  SUICIDE
  REWARD
}

union Action = CreateAction | CallAction | SuicideAction | RewardAction
union Result = CreateResult | CallResult

# Create type-related fields and result
type CreateAction {
  from: String
  value: BigInt
  gas: BigInt
  init: String
}

type CreateResult {
  gasUsed: BigInt
  code: String
  address: String
}

# Call type-related fields and result
type CallAction {
  from: String
  to: String
  value: BigInt
  gas: BigInt
  sighash: String
  input: String
}

type CallResult {
  gasUsed: BigInt
  output: String
}

# Suicide type-related fields
type SuicideAction {
  address: String
  refundAddress: String
  balance: BigInt
}

# Reward type-related fields
type RewardAction {
  author: String
  value: BigInt
  rewardType: String
}

type Transaction @entity {
  id: ID!
  blockHash: String!
  timestamp: DateTime! @index
  hash: String!
  type: EvmTransactionType!
  label: EvmLabel! @index
  from: String!
  to: String
  fee: BigInt!
  value: BigInt!
  input: String!
  deployedAddress: String
  success: Boolean
  sighash: String
  transactionIndex: Int!
  traces: [Trace!] @derivedFrom(field: "transaction")
}

enum EvmTransactionType {
  LEGACY
  EIP1559
  EIP2930
}

enum EvmLabel {
  CONTRACT_DEPLOY
  CONTRACT_CALL
  NATIVE_TRANSFER
}
