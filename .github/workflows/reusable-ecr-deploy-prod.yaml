name: Build and push to ECR(tokenguard-prod)

on:
  workflow_call:

env:
  AWS_REGION: eu-west-1

jobs:
  test-build:
    name: Check if image builds correctly on PR
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: processor.Dockerfile
            image-tag: ${{ github.sha }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Build image
        env:
          DOCKERFILE: ${{ matrix.dockerfile }}
        run: docker build -f $DOCKERFILE .

  build-push:
    name: Build image and push to ECR
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: processor.Dockerfile
            image-tag: ${{ github.sha }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        # Setup hardware emulator using QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/amd64,linux/arm64
        # Setup Docker Builderx for multi-arch images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set image name
        id: set-image-name
        run: |
          branch=$(echo "$GITHUB_REF" | sed 's#refs/heads/##')
          echo "::set-output name=image-name::tokenguard-prod-squid-$branch-processor"

      - name: Check if ECR repository exists
        id: check-ecr-repository
        run: |
          repository_name=$(echo "${{ steps.set-image-name.outputs.image-name }}" | tr '[:upper:]' '[:lower:]')
          repository_url="$ECR_REGISTRY/$repository_name"
          if ! aws ecr describe-repositories --repository-names "$repository_name" &> /dev/null; then
            echo "ECR repository '$repository_name' does not exist. Creating it now..."
            aws ecr create-repository --repository-name "$repository_name"
          else
            echo "ECR repository '$repository_name' already exists"
          fi

      - name: Build, tag and push to Amazon ECR     
        id: build-push-ecr
        uses: docker/build-push-action@v3
        with:
          push: true
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ steps.set-image-name.outputs.image-name }}:${{ matrix.image-tag }}
      - name: Image digest
        run: echo ${{ steps.build-push-ecr.outputs.digest }}

  deploy-eks:
    name: Deploy image on EKS(tokenguard-prod)
    needs: build-push
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: processor.Dockerfile
            image-tag: ${{ github.sha }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set image name
        id: set-image-name
        run: |
          branch=$(echo "$GITHUB_REF" | sed 's#refs/heads/##')
          echo "::set-output name=image-name::tokenguard-prod-squid-$branch-processor"
          echo "::set-output name=deployment-name::$branch-squid-processor"

      - name: Deploy to tokenguard-prod
        uses: christallire/kubectl-aws-eks@1.1.0-arm64-fix2
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_PROD }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.set-image-name.outputs.image-name }}
          IMAGE_TAG: ${{ matrix.image-tag }}
          DEPLOYMENT_NAME: ${{ steps.set-image-name.outputs.deployment-name }}
        with:
          args: -n prod set image deployment/$DEPLOYMENT_NAME tgv2-client=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
      - name: verify deployment
        uses: christallire/kubectl-aws-eks@1.1.0-arm64-fix2
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_PROD }}
          DEPLOYMENT_NAME: ${{ steps.set-image-name.outputs.deployment-name }}
        with:
          args: -n prod rollout status deployment/$DEPLOYMENT_NAME
